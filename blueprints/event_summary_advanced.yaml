blueprint:
  name: AI Event Summary Advanced (v1.4.4)
  author: valentinfrlch, adnansarajlic
  description: >
    AI-powered summaries for security camera events.
    Sends a notification with a preview to your phone that is updated dynamically when the AI summary is available.
    Includes keyword-based notification triggering with options to only notify on keyword matches.
    Supports multiple languages for AI responses.
  domain: automation
  source_url: https://github.com/valentinfrlch/ha-llmvision/blob/main/blueprints/event_summary_advanced.yaml
  input:
    remember:
      name: Remember
      description: Stores this event in the Timeline so you can ask about it.
      default: false
      selector:
        boolean:
    use_memory:
      name: Use Memory
      description: 'Use information stored in memory to provide additional context. Memory must be set up.'
      default: false
      selector:
        boolean:
    response_language:
      name: Response Language
      description: 'Language for AI responses (e.g., "English", "Swedish", "Spanish"). Enter the language name in English.'
      default: "English"
      selector:
        text:
          multiline: false
    message:
      name: Prompt
      description: Model prompt for the video_analyzer action
      default: "Observe and summarize the movements and interactions of dynamic elements such as people, vehicles, and animals over a sequence of short-interval images. Ignore static objects and scenery. Provide a concise and chronological account of all detected motion, specifying subjects when identifiable (e.g., 'a red car,' 'a dog'). Do not mention or imply the existence of images - resent the information as if directly observing the events. If no movement is detected, respond with: 'No activity observed.'"
      selector:
        text:
          multiline: true
    trigger_keywords:
      name: Trigger Keywords
      description: Enter keywords (comma-separated) that will trigger notifications regardless of importance setting. For example person, car, package, delivery, etc. Keywords are case-insensitive and will be stripped of leading/trailing spaces.
      default: ""
      selector:
        text:
          multiline: false
    keywords_only:
      name: Keywords Only
      description: When enabled, notifications will only be sent if the summary contains one of your trigger keywords.
      default: false
      selector:
        boolean:
    generate_title:
      name: Generate Title
      description: Use AI to generate a title for the event summary. When disabled, titles will be generated from detected keywords if available.
      default: false
      selector:
        boolean:
    run_conditions:
      name: Run Conditions
      description: All conditions must be true in order for the blueprint to run.
      default: []
      selector:
        condition:
    notify_device:
      name: Notify Device
      description: The devices to send the notification to. Multiple devices may be used. Only works with Home Assistant mobile app.
      default: []
      selector:
        device:
          multiple: true
          filter:
            integration: mobile_app
    notification_delivery:
      name: Notification Delivery
      description: "Controls how notifications are delivered. \n \n **Dynamic** immediately notifies with a live preview and updates the notification silently with a summary once it is available. \n **Consolidated** Delays the notification until the event summary is generated. Use this if you're receiving multiple notifications for the same event."
      default: 'Dynamic'
      selector:
        select:
          options:
            - Dynamic
            - Consolidated
    camera_entities:
      name: Camera Entities
      description: List of camera entities to monitor
      default: []
      selector:
        entity:
          multiple: true
          filter:
            domain: camera
    trigger_state:
      name: Trigger State
      description: Automation starts when one of your camera changes to this state.
      default: 'recording'
      selector:
        text:
          multiline: false			
    motion_sensors:
      name: Motion Sensor
      description: Set motion sensor that will trigger automation. Use the same order used for camera entities.
      default: []
      selector:
        entity:
          multiple: true
          filter:
            domain: binary_sensor
    preview_mode:
      name: Preview Mode
      description: "Choose between a live preview or a snapshot of the event. \n\n **Important:** Live Preview is only supported on iOS."
      default: Snapshot
      selector:
        select:
          options:
            - Snapshot
            - Live Preview
    delay_seconds:
      name: Initial Delay
      description: Delay in seconds before analyzing video after motion is detected.
      default: 0
      selector:
        number:
          min: 0
          max: 30
          step: 1
          unit_of_measurement: seconds
          mode: slider
    cooldown:
      name: Cooldown
      description: Time in minutes to wait before running again. Strongly recommended for busy areas.
      default: 10
      selector:
        number:
          min: 0
          max: 60
    tap_navigate:
      name: Tap Navigate
      description: >-
        Home Assistant dashboard to navigate to when notification is opened (e.g. /lovelace/cameras).
      default: /lovelace/0
      selector:
        text:
          multiline: false
    duration:
      name: Duration
      description: Duration to record for analysis (in seconds).
      default: 5
      selector:
        number:
          min: 1
          max: 60
    max_frames:
      name: Max Frames
      description: How many frames to analyze. Picks frames with the most movement.
      default: 3
      selector:
        number:
          min: 1
          max: 60
    provider:
      name: Provider
      description: Provider to use for analysis. See docs for additional information.
      selector:
        config_entry:
          integration: llmvision
    model:
      name: Model
      description: Which model to use. Depends on chosen provider.
      default: "gemini-2.0-flash"
      selector:
        text:
          multiline: false
    target_width:
      name: Target Width
      description: Downscale images (uses less tokens and speeds up processing)
      default: 1280
      selector:
        number:
          min: 512
          max: 3840
    max_tokens:
      name: Maximum Tokens
      description: Maximum number of tokens to generate. Use this to control the length of the summaries.
      default: 20
      selector:
        number:
          min: 1
          max: 100
    temperature:
      name: Temperature
      description: Randomness. Lower is more accurate, higher is more creative.
      default: 0.1
      selector:
        number:
          min: 0.1
          max: 1.0
          step: 0.1

variables:
  remember: !input remember
  cooldown: !input cooldown
  delay_seconds: !input delay_seconds
  preview_mode: !input preview_mode
  notify_devices: !input notify_device
  notification_delivery: !input notification_delivery
  trigger_keywords: !input trigger_keywords
  keywords_only: !input keywords_only
  generate_title: !input generate_title
  response_language: !input response_language
  message: !input message
  language_instruction: >
    {% if response_language and response_language|lower != 'english' %}
      Respond in {{response_language}}. 
    {% else %}
      {% set _ = None %}
    {% endif %}
  modified_prompt: >
      {% if response_language and response_language|lower != 'english' %}
        Respond in {{response_language}}. {{message}} in {{response_language}}.
      {% else %}
        {{message}}
      {% endif %}
  keywords_list: >
    {% if trigger_keywords %}
      {% set keywords = trigger_keywords.split(',') %}
      {% set clean_keywords = [] %}
      {% for keyword in keywords %}
        {% set clean_keyword = keyword.strip().lower() %}
        {% if clean_keyword %}
          {% set clean_keywords = clean_keywords + [clean_keyword] %}
        {% endif %}
      {% endfor %}
      {{ clean_keywords }}
    {% else %}
      {{ [] }}
    {% endif %}
  device_name_map: >
    {% set ns = namespace(device_names=[]) %}
    {% for device_id in notify_devices %}
      {% set device_name = device_attr(device_id, "name") %}
      {% set sanitized_name = "mobile_app_" + device_name | slugify  %}
      {% set ns.device_names = ns.device_names + [sanitized_name] %}
    {% endfor %}
    {{ ns.device_names }}
  camera_entities_list: !input camera_entities
  motion_sensors_list: !input motion_sensors
  camera_entity: >
    {% if motion_sensors_list and not trigger.entity_id.startswith("camera") %}
      {% set index = motion_sensors_list.index(trigger.entity_id) %}
        {{ camera_entities_list[index] }}
    {% else %}
      {{ trigger.entity_id }}
    {% endif %}
  tag: >
    {{ camera_entity + int(as_timestamp(now()))|string }}
  group: >
    {{ camera_entity }}
  label: Motion detected
  camera: >
    {{ camera_entity.replace("camera.", "").replace("_", " ")|capitalize }}
  # Define a variable to use for notification interruption level
  custom_interruption_level: "active"

max_exceeded: silent
mode: single

triggers:
  - trigger: state
    entity_id: !input camera_entities
    to: !input trigger_state
    id: 'camera_trigger'
  - trigger: state
    entity_id: !input motion_sensors
    to: 'on'
    id: 'motion_sensor_trigger'

condition:
  - and: !input run_conditions
  
action:
  # Add delay before processing if configured
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ delay_seconds > 0 }}"
        sequence:
          - delay: "{{ delay_seconds }}"
  
  # Analyze event for keywords
  - alias: "Analyze event"
    action: llmvision.stream_analyzer
    data:
      image_entity: "{{[camera_entity]}}"
      duration: !input duration
      provider: !input provider
      model: !input model
      message: "{{modified_prompt}}"
      use_memory: !input use_memory
      remember: !input remember
      expose_images: "{{preview_mode == 'Snapshot' or remember}}"
      generate_title: "{{generate_title}}"
      include_filename: true
      max_frames: !input max_frames
      target_width: !input target_width
      max_tokens: !input max_tokens
      temperature: !input temperature  
    response_variable: response

  # Check if event contains any trigger keywords - FIXED VERSION
  - variables:
      contains_keywords: >
        {% set ns = namespace(found=false) %}
        {% if keywords_list | length > 0 %}
          {% set response_lower = response.response_text | lower %}
          {% for keyword in keywords_list %}
            {% if keyword in response_lower %}
              {% set ns.found = true %}
            {% endif %}
          {% endfor %}
        {% endif %}
        {{ ns.found }}
      
      # Find matched keywords for title generation when AI title is disabled
      matched_keywords: >
        {% set found_keywords = [] %}
        {% if not generate_title and keywords_list | length > 0 %}
          {% set response_lower = response.response_text | lower %}
          {% for keyword in keywords_list %}
            {% if keyword in response_lower %}
              {% set found_keywords = found_keywords + [keyword] %}
            {% endif %}
          {% endfor %}
        {% endif %}
        {{ found_keywords }}
      
      # Generate keyword-based title
      keyword_title: >
        {% if not generate_title and matched_keywords | length > 0 %}
          {% set capitalized_keywords = [] %}
          {% for keyword in matched_keywords %}
            {% set capitalized_keywords = capitalized_keywords + [keyword | title] %}
          {% endfor %}
          {% if capitalized_keywords | length > 2 %}
            {{ capitalized_keywords[0:2] | join(", ") }} and more detected
          {% else %}
            {{ capitalized_keywords | join(" and ") }} detected
          {% endif %}
        {% else %}
          {{ "Motion detected 2" }}
        {% endif %}

  # Debug the keyword matching
  - service: system_log.write
    data:
      message: "Keywords found: {{ contains_keywords }}, Matched keywords: {{ matched_keywords }}"
      level: info

  # Cancel automation if doesn't meet notification criteria
  - choose:
      # If keywords_only is true, only continue if keywords are found
      - conditions:
          - condition: template
            value_template: "{{ keywords_only and not contains_keywords }}"
        sequence:
          - stop: "No keywords found and keywords_only is enabled"

  - alias: "Update label with title"
    variables:
      label: >
        {% if generate_title and response.title is defined %}
          {{ response.title }}
        {% elif not generate_title and matched_keywords | length > 0 %}
          {{ keyword_title }}
        {% else %}
          Motion detected
        {% endif %}

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ notification_delivery == 'Dynamic' }}"
        sequence:
        - alias: "Send instant notification to notify devices"
          repeat:
            for_each: "{{device_name_map}}"
            sequence:
              - action: "notify.{{ repeat.item }}"
                data:
                  title: "{{ label }}"
                  message: "{{camera}} has detected activity."
                  data:
                    entity_id: "{{camera_entity}}"
                    url: !input tap_navigate #iOS
                    clickAction: !input tap_navigate #Android
                    tag: "{{tag}}"
                    group: "{{group}}"
                    alert_once: true
                    push:
                      interruption-level: "{{custom_interruption_level}}"

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ preview_mode=='Snapshot' }}"
        sequence:
        - alias: "(Snapshot) Update notification on notify devices"
          repeat:
            for_each: "{{device_name_map}}"
            sequence:
              - action: "notify.{{ repeat.item }}"
                data:
                  title: "{{ label }}"
                  message: "{{response.response_text}}"
                  data:
                    image: "{{response.key_frame.replace('/config/www/','/local/') }}"
                    url: !input tap_navigate #iOS
                    clickAction: !input tap_navigate #Android
                    tag: "{{tag}}"
                    group: "{{group}}"
                    push:
                      interruption-level: "{{'passive' if notification_delivery=='Dynamic' else custom_interruption_level}}"
      - conditions:
          - condition: template
            value_template: "{{ preview_mode=='Live Preview' }}"
        sequence:
        - alias: "(Live Preview) Update notification on notify devices"
          repeat:
            for_each: "{{device_name_map}}"
            sequence:
              - action: "notify.{{ repeat.item }}"
                data:
                  title: "{{ label }}"
                  message: "{{response.response_text}}"
                  data:
                    entity_id: "{{camera_entity}}"
                    url: !input tap_navigate #iOS
                    clickAction: !input tap_navigate #Android
                    tag: "{{tag}}"
                    group: "{{group}}"
                    push:
                      interruption-level: "{{'passive' if notification_delivery=='Dynamic' else custom_interruption_level}}"
            
  - delay: '00:{{cooldown|int}}:00'